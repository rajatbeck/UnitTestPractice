apply plugin: 'com.android.application'
apply plugin: "de.mannodermaus.android-junit5"


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.learn.unittestdemo"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    androidTestImplementation 'junit:junit:4.12'


    def junit_version = "5.5.2"
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"


    def core_version = "1.0.0"
    // Core library
    androidTestImplementation "androidx.test:core:${core_version}"

    def junit_rule_version = "1.1.0"
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:${junit_rule_version}"
    androidTestImplementation "androidx.test:rules:${junit_rule_version}"

    def androidx_core_test_version = "2.1.0"
    androidTestImplementation "androidx.arch.core:core-testing:${androidx_core_test_version}"

    def mockito_version = "2.19.0"
    testImplementation "org.mockito:mockito-core:${mockito_version}"

    def dagger_version = "2.25.2"
    api "com.google.dagger:dagger:${dagger_version}"
    annotationProcessor "com.google.dagger:dagger-compiler:${dagger_version}"

    api "com.google.dagger:dagger-android:${dagger_version}"
    api "com.google.dagger:dagger-android-support:${dagger_version}" // if you use the support libraries
    annotationProcessor "com.google.dagger:dagger-android-processor:${dagger_version}"

    def material_version = "1.0.0"
    implementation "com.google.android.material:material:${material_version}"

    def room_version = "2.2.2"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    def lifecycle_version = "2.1.0"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version" // For Kotlin use lifecycle-reactivestreams-ktx


    def rx_android_version = "2.1.1"
    implementation "io.reactivex.rxjava2:rxandroid:${rx_android_version}"
// Because RxAndroid releases are few and far between, it is recommended you also
// explicitly depend on RxJava's latest version for bug fixes and new features.
// (see https://github.com/ReactiveX/RxJava/releases for latest 2.x.x version)
    def rxjava_version = "2.2.15"
    implementation "io.reactivex.rxjava2:rxjava:${rxjava_version}"

    def retrofit_version = "2.6.2"
    implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"


}
